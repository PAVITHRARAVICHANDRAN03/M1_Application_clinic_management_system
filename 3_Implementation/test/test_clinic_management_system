#include "unity.h"
#include <header.h>

/* Modify these two lines according to the project */
#include <header.h>
#include <STD_Types.h>
#define PROJECT_NAME    "Clinic management system"

/* Prototypes for all the test functions */
void Add_patient(u8 name[],u32 age,u8 gender[], u32 id);
void Edit_List(u32 id);
void DeleteNode(u32 data);
void Time_Reservation() ;
void Cancel_Reservation(u32 ID);
void Print_List(u32 id);
void Print_Reservation();

/* Required by the unity test framework */
void setUp(){}
/* Required by the unity test framework */
void tearDown(){}

/* Start of the application test */
int main()
{
/* Initiate the Unity Test Framework */
  UNITY_BEGIN();

/* Run Test functions */
  RUN_TEST(Edit_List);
  RUN_TEST(Time_Reservation);
  RUN_TEST(Cancel_Reservation);
  RUN_TEST(Print_List);
  RUN_TEST(Print_Reservation);
  RUN_TEST(DeleteNode);

  /* Close the Unity Test Framework */
  return UNITY_END();
}

/* Write all the test functions */ 
void Edit_List(void) {
  TEST_ASSERT_EQUAL(30, add(10, 20));
  TEST_ASSERT_EQUAL(-10, add(10, -20));
  TEST_ASSERT_EQUAL(-30, add(-10, -20));
  TEST_ASSERT_EQUAL(10, add(-10, 20));
}
#include "unity.h"
#include <clinic.h>

/* Modify these two lines according to the project */
#include <clinic.h>
#define PROJECT_NAME    "clinic managaement system"

/* Prototypes for all the test functions */
void test_add(void);
void test_read(void);
void test_view(void);
void test_search(void);
void test_edit(void);
void test_delete(void);
void test_show(void);
/* Required by the unity test framework */
void setUp(){}
/* Required by the unity test framework */
void tearDown(){}

/* Start of the application test */
int main()
{
/* Initiate the Unity Test Framework */
  UNITY_BEGIN();

/* Run Test functions */
  RUN_TEST(test_add);
  RUN_TEST(test_read);
  RUN_TEST(test_view);
  RUN_TEST(test_edit);
  RUN_TEST(test_search);
  RUN_TEST(test_delete);
  RUN_TEST(test_show);

  /* Close the Unity Test Framework */
  return UNITY_END();
}

/* Write all the test functions */ 
void test_add(void) {
  void add()
{
    printf("\n\n");
    printf("Already data inputed on the database =%d\n\n",num);//how many inputs
    printf("How many entry do you want to add=\n");
    scanf("%d",&input);
    TEST_ASSERT_EQUAL(sum=input+num);

    for(i=num,j=0; i<sum; i++)
    {
        printf("\n");
        fflush(stdin);
        printf("Enter patient's Name = ");
        TEST_ASSERT_EQUAL(gets(x[i].name));
        fflush(stdin);
        printf("Enter disease = ");
        gets(x[i].disease);
        fflush(stdin);
        printf("Enter the age = ");
        scanf("%d",&x[i].age);
        fflush(stdin);
        printf("Enter cabin no = ");
        scanf("%d",&x[i].cabin);
        fflush(stdin);
        printf("Enter phone number = ");
        scanf("%d",&x[i].phone);
        fflush(stdin);
        printf("\n");
        j++;
        a++;
        num++;
    }
}void del()
{
    int f,h;
    printf("Enter the serial number of the patient that you want to delete=");
    scanf("%d",&f);
    if(f<num)
    {
        printf("What do you want ?\n");
        printf("1.Remove the whole record\n2.Remove Name\n3.Remove Disease\n4.Remove age\
        scanf("%d",&h);
        if(h==1)
        {
            while(f<num)
            {
               TEST_ASSERT_EQUAL(strcpy(x[f].name,x[f+1].name));
               TEST_ASSERT_EQUAL(strcpy(x[f].disease,x[f+1].disease));
               TEST_ASSERT_EQUAL(x[f].age=x[f+1].age);
               TEST_ASSERT_EQUAL(x[f].cabin=x[f+1].cabin);
               TEST_ASSERT_EQUAL(x[f].phone=x[f+1].phone);
                f++;
            }
            num--;
        }
        else if(h==2)
        {
            strcpy(x[f].name,"Cleared");

        }
        else if(h==3)
        {
            strcpy(x[f].disease,"Cleared");
        }
        else if(h==4)
        {
            x[f].age=0;
        }
        else if(h==5)
        {
            x[f].cabin=0;
        }
        else if(h==6)
        {
            x[f].phone=0;
        }

    }
    else
        printf("\n\nInvalid Serial number\n");

}
void read()
{
    FILE *fp = fopen("patient.txt","r");
    if(fp == NULL)
    {
        TEST_ASSERT_EQUAL(fp = fopen("patient.txt","w"));
        fclose(fp);
        printf("File does not exist, I JUST CREATED IT, exiting...\n\n\n");
        return 0;
    }

   TEST_ASSERT_EQUAL( num = fread(x, sizeof(struct ad),100, fp));
    fclose(fp);
}
void write()
{
    FILE *fp = fopen("patient.txt","w");
    if(fp == NULL)
    {
        printf("Error");
        exit(1);
    }
    TEST_ASSERT_EQUAL(fwrite(x, sizeof(struct ad),num, fp));

    fclose(fp);
}
void DeleteNode(void) {
 
  /* Dummy fail*/
  // TEST_ASSERT_EQUAL(1500, add(750, 7500));
}
void Cancel_Reservation(void) {
  TEST_ASSERT_EQUAL(-3, subtract(0, 3));
  
  /* Dummy fail*/
  // TEST_ASSERT_EQUAL(1, subtract(1000, 900));
}

void Time_Reservation(void) {
  TEST_ASSERT_EQUAL(0, multiply(1, 0));
  
  /* Dummy fail*/
  // TEST_ASSERT_EQUAL(2, multiply(2, 5));
}
void Print_Reservation (void) {
  TEST_ASSERT_EQUAL(0, multiply(1, 0));
  
  /* Dummy fail*/
  // TEST_ASSERT_EQUAL(2, multiply(2, 5));
}


